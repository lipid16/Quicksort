#include<iostream>
#include <cstdlib>
#include <ctime>
#include "median_of_medians.cpp"
#include "Randomized.cpp"
#include "pivot_median.cpp"
#include "quick_real.cpp"
#include "random_median.cpp"

using namespace std;

void Med_Of_Medians();
void rand_pivot();
void pivot_med();
void realWorld_quick();
void rand_med();


class Array{

private:
    int *myArray;
    int size=0;

public:

    void generateArray(int s){
        size = s;
        myArray = new int[s];
        for(int i=0;i<s;i++){
            myArray[i] = rand()%100+1;
        }
    }
    void setArray(int arr[], int s){
        size = s;
        for(int i=0;i<size;i++){
            myArray[i] = arr[i];
        }
    }

    int* getArray(){
        return myArray;
    }

    int getSize(){
        return size;
    }

    void printArray(){
        for(int i=0;i<size;i++){
            cout<<" "<<myArray[i];
        }
        cout<<endl;
    }
};

int main(){

    cout<<"********** ALGORITHM CS 5329 *****************"<<endl;
    cout<<"********* Project on QUICK SOrt***************"<<endl<<endl;
    cout<<"Please enter the size of the array: ";

    int array_size;
    cin>>array_size;

    cout<<"Generating array randomly: "<<endl;

    Array array1;
    array1.generateArray(array_size);
    cout<<endl<<"Following array has been generated by the system: "<<endl;
    //array1.printArray();


    int size = array1.getSize();
    int *arr = new int[size];
    arr = array1.getArray();
    for(int i=0;i<size;i++){
        cout<<" "<<arr[i];
    }
    cout<<endl<<endl;

    int option;
    cout<<"Please Select a Options: "<<endl;
    cout<<"1. Median of Median (3/5/7): "<<endl;
    cout<<"2. Randomized median: "<<endl;
    cout<<"3. Median as Pivot: "<<endl;
    cout<<"4. Random element as pivot: "<<endl;
    cout<<"5. RealWorld Quicksort: "<<endl;
    cout<<"6. Exit: "<<endl;
    cin>>option;

   switch(option){

        case 1: Med_Of_Medians(); break;
        case 2: rand_med(); break;
       /* case 3: pivot_med(arr,size); break;
        case 4: rand_pivot(arr,size); break;
        case 5: realWorld_quick(arr,size); break;*/

   }
   return 0;
}

void Med_Of_Medians()
{
    MedianOfMedians median;
    //Array a;
    int k=3;
    int size=10;
    int arr[]={7,8,2,5,16,2,12,45,6,1};
    median.findMedian(arr,size-1);

    for(int i=0;i<size;i++){
     cout<<arr[i]<<" ";
   }
}

void rand_med(){
        int arr[] = {3,5,2,9,6,8,4,1,4,3};

        cout<<"Enter K: ";
        int k;
        cin>>k;
        random_median r1;
        int ele = r1.findElement(arr,k,10);
        cout<<"Kth smallest element is: "<<ele<<endl;
        for(int i=0;i<10;i++){
            cout<<arr[i]<<" ";
        }
}

void rand_pivot(){

    Randomized rp;
    int n, i;
	cout<<"\nEnter the number of data element to be sorted: ";
	cin>>n;

	int arr[n];
	for(i = 0; i < n; i++)
	{
		cout<<"Enter element "<<i+1<<": ";
		cin>>arr[i];
	}

	rp.QuickSort(arr, 0, n-1);

	// Printing the sorted data.
	cout<<"\nSorted Data ";
	for (i = 0; i < n; i++)
        	cout<<" "<<arr[i];
}


void pivot_med(){
      pivot_median pv;
    int size = 3;
    int arr[size] = {3,7,2};
    pv.setSize(size);
    pv.quickSort(arr,0,size-1);
    for(int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
}


void realWorld_quick()
{
    quick_real q1;
     int arr[10] = {3,5,2,9,6,8,4,1,4,3};
     q1.quickSort(arr, 0, 9);
    for(int i=0;i<10;i++){
        cout<<arr[i]<<" ";
    }
}
